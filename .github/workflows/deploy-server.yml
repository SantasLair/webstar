name: Deploy WebStar Server to DigitalOcean

on:
  push:
    branches: [ main ]
    paths:
      - 'webstar-server-dotnet/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'webstar-server-dotnet/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: webstar-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./webstar-server-dotnet
        file: ./webstar-server-dotnet/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to DigitalOcean
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_PRIVATE_KEY }}
        script: |
          # Create project directory if it doesn't exist
          mkdir -p /opt/webstar
          cd /opt/webstar
          
          # Download latest docker-compose.yml from repo
          curl -o docker-compose.yml https://raw.githubusercontent.com/SantasLair/webstar/main/docker-compose.yml
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/santaslair/webstar-server:latest
          
          # Stop existing containers
          docker-compose --profile production down || true
          docker stop webstar-server nginx-proxy letsencrypt-companion 2>/dev/null || true
          docker rm webstar-server nginx-proxy letsencrypt-companion 2>/dev/null || true
          
          # Create updated docker-compose.yml with prebuilt image
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            webstar-server:
              image: ghcr.io/santaslair/webstar-server:latest
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:5090
                - VIRTUAL_HOST=dev.webstar.santaslair.net
                - LETSENCRYPT_HOST=dev.webstar.santaslair.net
                - LETSENCRYPT_EMAIL=damon.ellerbee@gmail.com
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5090/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              profiles:
                - production
          
            nginx-proxy:
              image: nginxproxy/nginx-proxy
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - /var/run/docker.sock:/tmp/docker.sock:ro
                - certs:/etc/nginx/certs
                - vhost.d:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
              restart: unless-stopped
              profiles:
                - production
          
            letsencrypt-companion:
              image: nginxproxy/acme-companion
              depends_on:
                - nginx-proxy
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - certs:/etc/nginx/certs
                - vhost.d:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - acme:/etc/acme.sh
              environment:
                - DEFAULT_EMAIL=damon.ellerbee@gmail.com
              restart: unless-stopped
              profiles:
                - production
          
          volumes:
            certs:
            vhost.d:
            html:
            acme:
          EOF
          
          # Start all services
          docker-compose --profile production up -d
          
          # Clean up old images
          docker image prune -f
