@page "/"
@model WebStarServer.Pages.IndexModel
@{
    ViewData["Title"] = "WebStar Server";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #2a3441;
            color: #ffffff;
            line-height: 1.6;
            min-height: 100vh;
        }
        
        .header {
            background: #355570;
            color: white;
            padding: 2rem 0;
            text-align: center;
        }
        
        .header h1 {
            font-size: 3rem;
            font-weight: 600;
            margin: 0;
        }
        
        .header .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-top: 0.5rem;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 3rem 2rem;
        }
        
        .status-section {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .status {
            background: #1e5128;
            border: 1px solid #2d7738;
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1rem 0;
            font-size: 1.1rem;
            color: #ffffff;
        }
        
        .nav-section {
            margin: 2rem 0;
        }
        
        .nav-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #478cbf;
        }
        
        .nav-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .nav-card {
            background: #3e4a59;
            border: 1px solid #4a5568;
            border-radius: 8px;
            padding: 1.5rem;
            text-decoration: none;
            color: #ffffff;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        }
        
        .nav-card:hover {
            background: #4a5568;
            border-color: #478cbf;
            box-shadow: 0 4px 16px rgba(71, 140, 191, 0.2);
            transform: translateY(-2px);
            color: #ffffff;
            text-decoration: none;
        }
        
        .nav-card h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #87ceeb;
        }
        
        .nav-card p {
            font-size: 0.9rem;
            color: #b8c5d1;
            margin: 0;
        }
        
        .stats-detail {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #4a5568;
            font-size: 0.8rem;
            color: #87ceeb;
        }
        
        .stats-row {
            display: flex;
            justify-content: space-between;
            margin: 0.3rem 0;
        }
        
        .lobby-item {
            background: #2a3441;
            padding: 0.5rem;
            margin: 0.5rem 0;
            border-radius: 4px;
            border-left: 3px solid #478cbf;
        }
        
        .loading {
            opacity: 0.6;
            animation: pulse 2s infinite;
        }
        
        .error {
            color: #ff6b6b;
        }
        
        .success {
            color: #51cf66;
        }
        
        @@keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }
        
        .external-links {
            background: #3e4a59;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
        }
        
        .external-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .external-link {
            background: #478cbf;
            color: white;
            text-decoration: none;
            padding: 1rem 1.5rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: block;
            font-size: 1rem;
        }
        
        .external-link:hover {
            background: #5aa3d9;
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(71, 140, 191, 0.3);
        }
        
        .footer {
            background: #1e2329;
            border-top: 1px solid #4a5568;
            text-align: center;
            padding: 2rem;
            color: #b8c5d1;
            font-size: 0.9rem;
        }
        
        @@media (max-width: 768px) {
            .container {
                padding: 2rem 1rem;
            }
            
            .nav-grid {
                grid-template-columns: 1fr;
            }
            
            .external-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>WebStar Server</h1>
        <div class="subtitle">WebRTC Signaling Server for Godot Engine</div>
    </div>
    
    <div class="container">
        <div class="status-section">
            <div class="status success">
                ‚úÖ Server is running and ready!
            </div>
        </div>
        
        <div class="nav-section">
            <h2 class="nav-title">Server Monitoring</h2>
            <div class="nav-grid">
                <div class="nav-card" id="health-card">
                    <h3>Health Check</h3>
                    <p id="health-status">Loading...</p>
                    <div class="stats-detail" id="health-detail"></div>
                </div>
                <div class="nav-card" id="stats-card">
                    <h3>Statistics</h3>
                    <p id="stats-status">Loading...</p>
                    <div class="stats-detail" id="stats-detail"></div>
                </div>
                <div class="nav-card" id="lobbies-card">
                    <h3>Active Lobbies</h3>
                    <p id="lobbies-status">Loading...</p>
                    <div class="stats-detail" id="lobbies-detail"></div>
                </div>
            </div>
        </div>
        
        <div class="external-links">
            <h2 class="nav-title">WebStar Project</h2>
            <div class="external-grid">
                <a href="https://damon-ellerbee.itch.io/test" target="_blank" class="external-link">
                    üéÆ Try MVP Demo
                </a>
                <a href="https://github.com/SantasLair/webstar" target="_blank" class="external-link">
                    üìÇ GitHub Repository
                </a>
            </div>
        </div>
    </div>
    
    <div class="footer">
        <p>Powered by WebStar ‚Ä¢ Open Source WebRTC Networking for Godot</p>
    </div>
    
    <script>
        // Auto-refresh data every 5 seconds
        setInterval(updateServerData, 5000);
        
        // Load data immediately on page load
        document.addEventListener('DOMContentLoaded', updateServerData);
        
        async function updateServerData() {
            await Promise.all([
                updateHealth(),
                updateStats(),
                updateLobbies()
            ]);
        }
        
        async function updateHealth() {
            try {
                const response = await fetch('/health');
                const data = await response.json();
                
                const statusEl = document.getElementById('health-status');
                const detailEl = document.getElementById('health-detail');
                
                statusEl.textContent = data.status === 'healthy' ? '‚úÖ Healthy' : '‚ùå Unhealthy';
                statusEl.className = data.status === 'healthy' ? 'success' : 'error';
                
                const uptimeHours = Math.floor(data.uptime / 3600);
                const memoryMB = Math.round(data.memory / 1024 / 1024);
                
                detailEl.innerHTML = `
                    <div class="stats-row"><span>Uptime:</span><span>${uptimeHours}h</span></div>
                    <div class="stats-row"><span>Memory:</span><span>${memoryMB} MB</span></div>
                    <div class="stats-row"><span>Clients:</span><span>${data.clients}</span></div>
                    <div class="stats-row"><span>Lobbies:</span><span>${data.lobbies}</span></div>
                `;
            } catch (error) {
                document.getElementById('health-status').textContent = '‚ùå Error loading';
                document.getElementById('health-status').className = 'error';
                document.getElementById('health-detail').innerHTML = '<div class="error">Failed to fetch health data</div>';
            }
        }
        
        async function updateStats() {
            try {
                const response = await fetch('/stats');
                const data = await response.json();
                
                const statusEl = document.getElementById('stats-status');
                const detailEl = document.getElementById('stats-detail');
                
                statusEl.textContent = `${data.totalConnections} active connections`;
                statusEl.className = 'success';
                
                const uptimeHours = Math.floor(data.uptime / 3600);
                const uptimeMinutes = Math.floor((data.uptime % 3600) / 60);
                
                detailEl.innerHTML = `
                    <div class="stats-row"><span>Total Connections:</span><span>${data.totalConnections}</span></div>
                    <div class="stats-row"><span>Active Lobbies:</span><span>${data.activeLobbies}</span></div>
                    <div class="stats-row"><span>Uptime:</span><span>${uptimeHours}h ${uptimeMinutes}m</span></div>
                `;
            } catch (error) {
                document.getElementById('stats-status').textContent = '‚ùå Error loading';
                document.getElementById('stats-status').className = 'error';
                document.getElementById('stats-detail').innerHTML = '<div class="error">Failed to fetch stats</div>';
            }
        }
        
        async function updateLobbies() {
            try {
                const response = await fetch('/lobbies');
                const data = await response.json();
                
                const statusEl = document.getElementById('lobbies-status');
                const detailEl = document.getElementById('lobbies-detail');
                
                if (data.length === 0) {
                    statusEl.textContent = 'No active lobbies';
                    statusEl.className = '';
                    detailEl.innerHTML = '<div>No multiplayer sessions currently active</div>';
                } else {
                    statusEl.textContent = `${data.length} active lobbies`;
                    statusEl.className = 'success';
                    
                    const lobbiesHtml = data.map(lobby => `
                        <div class="lobby-item">
                            <div class="stats-row"><span><strong>${lobby.name}</strong></span><span>ID: ${lobby.id.substring(0, 8)}</span></div>
                            <div class="stats-row"><span>Players:</span><span>${lobby.playerCount}/${lobby.maxPlayers}</span></div>
                            <div class="stats-row"><span>Host:</span><span>${lobby.host.substring(0, 8)}</span></div>
                        </div>
                    `).join('');
                    
                    detailEl.innerHTML = lobbiesHtml;
                }
            } catch (error) {
                document.getElementById('lobbies-status').textContent = '‚ùå Error loading';
                document.getElementById('lobbies-status').className = 'error';
                document.getElementById('lobbies-detail').innerHTML = '<div class="error">Failed to fetch lobby data</div>';
            }
        }
    </script>
</body>
</html>